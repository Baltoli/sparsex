1. C API
   -- [DONE] BLAS for matrix operations
   -- PETSc (?)
   -- [DONE] Matrix tuning
      * [DONE] Pattern setup
   -- [DONE] Matrix I/O
      * [DONE] from file (enriched MM, etc.)
      * [DONE] from CSR
      * [DONE] from CSX file
      * [DONE] to CSX file
   -- [DONE] Matrix access
      * [DONE] set matrix values in CSX
   -- [DONE] Matrix reordering (RCM)
   -- [67%] Multithreaded setup
      * [DONE] Threads/Thread pool?
      * [DONE] NUMA setup (allocators)
      * Automatically detect number of cores/hyperthreading
   -- [DONE] Support for symmetrics
   -- [DONE] Timing/Profiling framework
      * [DONE] SpMV, preproc, etc.
   -- [DONE] Preprocessing optimization
      * [DONE] CSX file vs. online preproc.
   -- [DONE] Verbosity control
      * [DONE] verbosity levels (debug, info, warning, error)
      * [DONE] logger (standard / streams, low overhead, use of templates)
   -- [DONE] Baseline benchmarking code for all libs (MKL, OSKI, CSX)
      out-of-the-box

2. Refactoring (see REFACTORING for an updated view)
   -- [50%] Homogenize variable types (size_t, signed/unsigned)->nrows...
   -- [75%] Variable naming
   -- [75%] Code cleanup (also thgoud)
   -- [75%] Classes/Structures revisiting
   -- Cleanup the way C and C++ are mixed
   -- [90%] Memory management (leaks, double free corruptions, etc.)
   -- [DONE] SPM indexing (C++ templates?)
   -- [DONE] Replace old Elem's
   -- Revisit one-based indexing of sparse matrix elements.
   -- [DONE] Decide on whether to use always uint64_t for internal indexing.
      * Less templated code --> faster compilation
      * Larger working set during preprocessing --> possibly slower
   -- [DONE] Cleanup dead code.

3. User config & installation
   -- [DONE] autotools (configure; make; make install)
   -- [DONE] config.h
   -- [DONE] version.h (with version string)
   -- [DONE] Add an installable sparsex-config script
   -- Fix linking when building the static libraries only
   -- [DONE] Check if -Wl,--allow-multiple-definitions is needed
   -- [DONE] Check compilation with diverse index and value types
   -- [DONE] CsxBench.hpp should not be installed, check other similar headers.
   -- [DONE] SpmvTest crashes with spx_value_t=float
   -- [DONE] Generate documentation with `make doc'
   -- [DONE] Check pOSKI/MKL bench  builds
   -- Check if CXX supports the required C++11 features
   -- If CXX=icc set up the correct flags for MKL
   -- Library version suffix when installed

4. [DONE] Testing
   -- [DONE] Command-line interface
      * use of options
   -- [DONE] Test script

5. [DONE] Documentation
   -- [DONE] doxygen (API/Development)
      * Add a description of SparseX at main page of the Doxygen documentation
      * Check that EVERYTHING is documented in API, including #define's
      * v3[start...end) = v1[start...end) + num * v2[start...end)
        > Notation is not symmetric. Think of using TBB notation, e.g.,
          v3[start:end] = v1[start:end] + num*v2[start:end]

   -- [DONE] User guide & Manual

6. [DONE] Demo
   -- Libcsx vs. pOSKI vs. Intel MKL vs. Banded matrices

7. [DONE] Symmetrics revisiting
8. [DONE] What about libspm C library?
   -- [DONE] Rewrite Bench/CheckLoop() in C++ and ditch the rest

9. Github
   -- [...]/csx -> [...]/sparsex
